import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

plugins {
	id 'maven-publish'
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'org.ajoberstar.grgit' version '4.1.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}"
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/covalent.accesswidener")
}

runServer {
	standardInput = System.in
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		officialMojangMappings()
		signatureFix("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.]
	// This is required for javax.annotation.Nullable to work properly.
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	// REI. Disable the modRuntime line if REI is broken.
	modApi "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}" // <- disable this on server-side, it's breaking

	// ModMenu
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

	implementation "com.moandjiezana.toml:toml4j:${project.toml4j_version}"
	implementation "com.electronwill.night-config:core:${project.tomlnc_version}"
	implementation "com.electronwill.night-config:toml:${project.tomlnc_version}"

	include "com.moandjiezana.toml:toml4j:${project.toml4j_version}"
	include "com.electronwill.night-config:core:${project.tomlnc_version}"
	include "com.electronwill.night-config:toml:${project.tomlnc_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Charm
	modImplementation "svenhjol.charm:charm:${project.charm_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}

	exclude("META-INF/*.materials")

	//expand resource templates
	filesMatching("**/*.template.json") {
		JsonBuilder json = new JsonBuilder(new JsonSlurper().parseText(it.file.text))
		String template = new JsonBuilder(json.content.template).toPrettyString()
		def v = json.content.variants
		Iterable<String> variants
		if (v instanceof String) variants = file("${sourceSets.main.resources.srcDirs[0]}/META-INF/${v}.variants").readLines().findAll { !it.isEmpty() }
		else variants = v
		File dir = it.relativePath.parent.getFile(file("$buildDir/resources/main"))
		dir.mkdirs()
		String name = it.name.replace(".template.json", ".json")
		String[] replacements = v instanceof String ? variants.remove(0).split(':') : ["VARIANT"]
		for (variant in variants) {
			Map<String, String> s = [replacements, variant.split(':', -1)].transpose().collectEntries()
			def file = new File(dir, s.inject(name) { r, e -> r.replace(e.key, e.value) })
			if (!file.exists()) {
				file.createNewFile()
				file.text = s.inject(template) { r, e -> r.replace(e.key, e.value) }
			}
		}
		it.exclude()
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

def getVersionMetadata() {
	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId
		return id;
	}

	// No tracking information could be found about the build
	return "unknown"
}

repositories {
	flatDir { dirs "lib" }
	maven { url "https://maven.shedaniel.me" }
	maven { url "https://maven.terraformersmc.com" }
}